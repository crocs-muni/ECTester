/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class cz_crcs_ectester_standalone_libs_NativeECLibrary */

#ifndef _Included_cz_crcs_ectester_standalone_libs_NativeECLibrary
#define _Included_cz_crcs_ectester_standalone_libs_NativeECLibrary
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_NativeECLibrary
 * Method:    getNativeTimingSupport
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_NativeECLibrary_getNativeTimingSupport
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_NativeECLibrary
 * Method:    setNativeTimingType
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_NativeECLibrary_setNativeTimingType
  (JNIEnv *, jobject, jstring);

/*
 * Class:     cz_crcs_ectester_standalone_libs_NativeECLibrary
 * Method:    getNativeTimingResolution
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_cz_crcs_ectester_standalone_libs_NativeECLibrary_getNativeTimingResolution
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_NativeECLibrary
 * Method:    getNativeTimingUnit
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_cz_crcs_ectester_standalone_libs_NativeECLibrary_getNativeTimingUnit
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_NativeECLibrary
 * Method:    getLastNativeTiming
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_cz_crcs_ectester_standalone_libs_NativeECLibrary_getLastNativeTiming
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_TomcryptLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_TomcryptLib
#define _Included_cz_crcs_ectester_standalone_libs_TomcryptLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_TomcryptLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_TomcryptLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_TomcryptLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_TomcryptLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_TomCrypt
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024TomCrypt_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024TomCrypt_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024TomCrypt_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024TomCrypt_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_TomCrypt
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024TomCrypt_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_TomCrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_TomCrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_TomCrypt
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_TomCrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_TomCrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_TomCrypt
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_TomCrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_TomCrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_TomCrypt
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_TomCrypt
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024TomCrypt_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_TomCrypt
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024TomCrypt_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_TomCryptRaw */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_TomCryptRaw
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_TomCryptRaw
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_TomCryptRaw
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024TomCryptRaw_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_TomCryptRaw
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024TomCryptRaw_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_BotanLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_BotanLib
#define _Included_cz_crcs_ectester_standalone_libs_BotanLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_BotanLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_BotanLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_BotanLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_BotanLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Botan
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Botan_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Botan_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Botan_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Botan_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Botan
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Botan_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Botan */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Botan
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Botan
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Botan */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Botan
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Botan
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Botan */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Botan
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Botan
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Botan
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Botan_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Botan
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Botan_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Botan */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Botan
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Botan
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Botan
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Botan_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Botan
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Botan_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_CryptoppLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_CryptoppLib
#define _Included_cz_crcs_ectester_standalone_libs_CryptoppLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_CryptoppLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_CryptoppLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_CryptoppLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_CryptoppLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Cryptopp
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Cryptopp_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Cryptopp_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Cryptopp_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Cryptopp_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Cryptopp
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Cryptopp_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Cryptopp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Cryptopp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Cryptopp
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Cryptopp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Cryptopp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Cryptopp
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Cryptopp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Cryptopp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Cryptopp
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Cryptopp
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Cryptopp_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Cryptopp
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Cryptopp_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Cryptopp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Cryptopp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Cryptopp
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Cryptopp
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Cryptopp_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Cryptopp
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Cryptopp_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_OpensslLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_OpensslLib
#define _Included_cz_crcs_ectester_standalone_libs_OpensslLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_OpensslLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_OpensslLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_OpensslLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_OpensslLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Openssl
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Openssl_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Openssl_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Openssl_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Openssl_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Openssl
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Openssl_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Openssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Openssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Openssl
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Openssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Openssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Openssl
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Openssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Openssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Openssl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Openssl
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Openssl_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Openssl
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Openssl_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Openssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Openssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Openssl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Openssl
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Openssl_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Openssl
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Openssl_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_MscngLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_MscngLib
#define _Included_cz_crcs_ectester_standalone_libs_MscngLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_MscngLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_MscngLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_MscngLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_MscngLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Mscng
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Mscng_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Mscng_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Mscng_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Mscng_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Mscng
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Mscng_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Mscng */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Mscng
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Mscng
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Mscng */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Mscng
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Mscng
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Mscng */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Mscng
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Mscng
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Mscng
 * Method:    generateSecret
 * Signature: (Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;Ljava/security/spec/AlgorithmParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Mscng_generateSecret__Ljava_security_interfaces_ECPublicKey_2Ljava_security_interfaces_ECPrivateKey_2Ljava_security_spec_AlgorithmParameterSpec_2
  (JNIEnv *, jobject, jobject, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Mscng
 * Method:    generateSecret
 * Signature: (Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;Ljava/security/spec/AlgorithmParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Mscng_generateSecret__Ljava_security_interfaces_ECPublicKey_2Ljava_security_interfaces_ECPrivateKey_2Ljava_security_spec_AlgorithmParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jobject, jobject, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Mscng */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Mscng
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Mscng
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Mscng
 * Method:    sign
 * Signature: ([BLjava/security/interfaces/ECPrivateKey;Ljava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Mscng_sign
  (JNIEnv *, jobject, jbyteArray, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Mscng
 * Method:    verify
 * Signature: ([B[BLjava/security/interfaces/ECPublicKey;Ljava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Mscng_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_BoringsslLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_BoringsslLib
#define _Included_cz_crcs_ectester_standalone_libs_BoringsslLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_BoringsslLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_BoringsslLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_BoringsslLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_BoringsslLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Boringssl
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Boringssl_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Boringssl_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Boringssl_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Boringssl_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Boringssl
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Boringssl_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Boringssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Boringssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Boringssl
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Boringssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Boringssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Boringssl
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Boringssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Boringssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Boringssl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Boringssl
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Boringssl_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Boringssl
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Boringssl_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Boringssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Boringssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Boringssl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Boringssl
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Boringssl_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Boringssl
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Boringssl_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_GcryptLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_GcryptLib
#define _Included_cz_crcs_ectester_standalone_libs_GcryptLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_GcryptLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_GcryptLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_GcryptLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_GcryptLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Gcrypt
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Gcrypt_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Gcrypt_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Gcrypt_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Gcrypt_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Gcrypt
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Gcrypt_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Gcrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Gcrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Gcrypt
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Gcrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Gcrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Gcrypt
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Gcrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Gcrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Gcrypt
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Gcrypt
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Gcrypt_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Gcrypt
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Gcrypt_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Gcrypt */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Gcrypt
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Gcrypt
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Gcrypt
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Gcrypt_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Gcrypt
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Gcrypt_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_MbedTLSLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_MbedTLSLib
#define _Included_cz_crcs_ectester_standalone_libs_MbedTLSLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_MbedTLSLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_MbedTLSLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_MbedTLSLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_MbedTLSLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_MbedTLS
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024MbedTLS_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024MbedTLS_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024MbedTLS_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024MbedTLS_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_MbedTLS
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024MbedTLS_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_MbedTLS */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_MbedTLS
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_MbedTLS
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_MbedTLS */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_MbedTLS
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_MbedTLS
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_MbedTLS */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_MbedTLS
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_MbedTLS
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_MbedTLS
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024MbedTLS_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_MbedTLS
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024MbedTLS_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_MbedTLS */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_MbedTLS
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_MbedTLS
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_MbedTLS
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024MbedTLS_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_MbedTLS
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024MbedTLS_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_IppcpLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_IppcpLib
#define _Included_cz_crcs_ectester_standalone_libs_IppcpLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_IppcpLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_IppcpLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_IppcpLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_IppcpLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Ippcp
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Ippcp_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Ippcp_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Ippcp_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Ippcp_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Ippcp
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Ippcp_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Ippcp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Ippcp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Ippcp
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Ippcp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Ippcp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Ippcp
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Ippcp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Ippcp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Ippcp
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Ippcp
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Ippcp_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Ippcp
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Ippcp_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Ippcp */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Ippcp
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Ippcp
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Ippcp
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Ippcp_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Ippcp
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Ippcp_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_MatrixsslLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_MatrixsslLib
#define _Included_cz_crcs_ectester_standalone_libs_MatrixsslLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_MatrixsslLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_MatrixsslLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_MatrixsslLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_MatrixsslLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Matrixssl
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Matrixssl_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Matrixssl_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Matrixssl_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Matrixssl_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Matrixssl
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Matrixssl_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Matrixssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Matrixssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Matrixssl
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Matrixssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Matrixssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Matrixssl
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Matrixssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Matrixssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Matrixssl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Matrixssl
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Matrixssl_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Matrixssl
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Matrixssl_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Matrixssl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Matrixssl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Matrixssl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Matrixssl
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Matrixssl_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Matrixssl
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Matrixssl_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_LibresslLib */

#ifndef _Included_cz_crcs_ectester_standalone_libs_LibresslLib
#define _Included_cz_crcs_ectester_standalone_libs_LibresslLib
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_LibresslLib
 * Method:    createProvider
 * Signature: ()Ljava/security/Provider;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_LibresslLib_createProvider
  (JNIEnv *, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_LibresslLib
 * Method:    getCurves
 * Signature: ()Ljava/util/Set;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_LibresslLib_getCurves
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_serialVersionUID 1421746759512286392LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_MAX_ARRAY_SIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_MAX_ARRAY_SIZE 2147483639L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_KEYS
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_KEYS 0L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_VALUES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_VALUES 1L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_ENTRIES
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_ENTRIES 2L
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_serialVersionUID 4112578634029874840LL
#undef cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_serialVersionUID
#define cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl_serialVersionUID -4298000515446427739LL
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeProvider_Libressl
 * Method:    setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeProvider_00024Libressl_setup
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl
#ifdef __cplusplus
extern "C" {
#endif
#undef cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl_DEFAULT_KEYSIZE
#define cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl_DEFAULT_KEYSIZE 256L
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl
 * Method:    keysizeSupported
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Libressl_keysizeSupported
  (JNIEnv *, jobject, jint);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl
 * Method:    paramsSupported
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Libressl_paramsSupported
  (JNIEnv *, jobject, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl
 * Method:    generate
 * Signature: (ILjava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Libressl_generate__ILjava_security_SecureRandom_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_Libressl
 * Method:    generate
 * Signature: (Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)Ljava/security/KeyPair;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyPairGeneratorSpi_00024Libressl_generate__Ljava_security_spec_AlgorithmParameterSpec_2Ljava_security_SecureRandom_2
  (JNIEnv *, jobject, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Libressl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Libressl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPublicKey_Libressl
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Libressl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Libressl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeECPrivateKey_Libressl
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Libressl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Libressl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Libressl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Libressl
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Libressl_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_Libressl
 * Method:    generateSecret
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;Ljava/lang/String;)Ljavax/crypto/SecretKey;
 */
JNIEXPORT jobject JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeKeyAgreementSpi_00024Libressl_generateSecret___3B_3BLjava_security_spec_ECParameterSpec_2Ljava_lang_String_2
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Libressl */

#ifndef _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Libressl
#define _Included_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Libressl
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Libressl
 * Method:    sign
 * Signature: ([B[BLjava/security/spec/ECParameterSpec;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Libressl_sign
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jobject);

/*
 * Class:     cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_Libressl
 * Method:    verify
 * Signature: ([B[B[BLjava/security/spec/ECParameterSpec;)Z
 */
JNIEXPORT jboolean JNICALL Java_cz_crcs_ectester_standalone_libs_jni_NativeSignatureSpi_00024Libressl_verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jbyteArray, jobject);

#ifdef __cplusplus
}
#endif
#endif
